buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("com.apollographql.apollo:apollo-gradle-plugin:2.2.0")
    }
}

plugins {
    id 'java'
}
group 'org.syncmesh'
version '1.0-SNAPSHOT'

apply plugin: 'com.apollographql.apollo'

repositories {
    jcenter()
}

dependencies {
    implementation("com.apollographql.apollo:apollo-runtime:2.2.0")
    implementation("com.squareup.okhttp:okhttp:2.5.0")
    implementation("com.apollographql.apollo:apollo-http-cache:2.2.0")
    implementation("com.apollographql.apollo:apollo-normalized-cache-sqlite:2.2.0")
    implementation("com.apollographql.apollo:apollo-coroutines-support:2.2.0")
    implementation("com.apollographql.apollo:apollo-api:2.2.0")
    implementation ("com.apollographql.apollo:apollo-rx2-support:2.2.0")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '7.0.0.jre8'
    compile('com.graphql-java:graphql-java:9.0')


// If not already on your classpath, you might need the jetbrains annotations
    compileOnly("org.jetbrains:annotations:13.0")
    testCompileOnly("org.jetbrains:annotations:13.0")
}
// build.gradle or build.gradle.kts
apollo {
    generateKotlinModels.set(false) // or false for Java models

}

test {
    useJUnitPlatform()
}